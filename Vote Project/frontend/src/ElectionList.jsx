import { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import Header from "./components/Header";
import { formatDateTime, translateStatus } from "./utils/dateUtils";
import CandidateApplicationForm from "./components/Student/CandidateApplicationForm"
import Swal from "sweetalert2";
import { apiFetch } from "./utils/apiFetch";

export default function ElectionList() {

    const [elections, setElections] = useState([]);
    const [loading, setLoading] = useState(true);

    const studentName = localStorage.getItem("studentName") || "";
    const roles = JSON.parse(localStorage.getItem("userRoles") || "[]");
    const isLoggedIn = !!studentName;
    const [applyingElectionId, setApplyingElectionId] = useState(null);
    const [showForm, setShowForm] = useState(false);
    const [eligible, setEligible] = useState(false);
    const [student, setStudent] = useState(null);
    const [votedElections, setVotedElections] = useState([]);
    useEffect(() => {
        const fetchData = async () => {
            try {
                const token = localStorage.getItem("token");

                const headers = {
                    "Content-Type": "application/json",
                };
                if (token) {
                    headers["Authorization"] = `Bearer ${token}`;
                }

                const data = await apiFetch("http://localhost:5000/api/elections", {
                    headers,
                });
                if (!data) return;

                // const data = await res.json();
                if (data.success) {
                    setElections(data.elections);
                } else {
                    alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
                }
            } catch (err) {
                console.error(err);
                alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö server");
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, []);

    useEffect(() => {
        if (!isLoggedIn) return;
        const fetchVoted = async () => {
            const token = localStorage.getItem("token");
            const headers = { "Content-Type": "application/json" };
            if (token) headers["Authorization"] = `Bearer ${token}`;
            const data = await apiFetch("/api/votes/status", { headers });
            if (data && data.success && data.voted_elections) {
                setVotedElections(data.voted_elections);
            }
        };
        fetchVoted();
    }, [isLoggedIn]);

    const checkEligibility = async (electionId) => {
        const token = localStorage.getItem('token');

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏°‡∏±‡πâ‡∏¢
        const eligibilityData = await apiFetch(`http://localhost:5000/api/eligibility/${electionId}`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        if (!eligibilityData) return;
        // const eligibilityData = await eligibilityRes.json();

        if (!eligibilityData.success || !eligibilityData.eligible) {
            Swal.fire({
                title: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ",
                text: "‡∏Ñ‡∏∏‡∏ì‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ\n ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£",
                icon: "warning",
                confirmButtonText: "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö",
            });

            return;
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const checkData = await apiFetch(`http://localhost:5000/api/applications/check/${electionId}`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        if (!checkData) return;

        // const checkData = await checkRes.json();

        if (checkData.applied) {
            Swal.fire({
                title: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
                text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ",
                icon: "warning",
                confirmButtonText: "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö",
            });
            return;
        }
        // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        setApplyingElectionId(electionId);
        setShowForm(true);

        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á student object ‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏£‡∏∑‡∏≠ state
        setStudent({
            user_id: eligibilityData.user_id,
            first_name: localStorage.getItem("first_name"),
            last_name: localStorage.getItem("last_name"),
            student_id: localStorage.getItem("student_id"),
            email: localStorage.getItem("email"),
            department: localStorage.getItem("department"),
            year_level: localStorage.getItem("year_level"),
        });
    };

    const handleVoteClick = async (electionId) => {
        const token = localStorage.getItem('token');
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÇ‡∏´‡∏ß‡∏ï‡∏Å‡πà‡∏≠‡∏ô
        const eligibilityData = await apiFetch(`http://localhost:5000/api/eligibility/${electionId}`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        if (!eligibilityData) return;

        if (!eligibilityData.success || !eligibilityData.eligible) {
            Swal.fire({
                title: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ",
                text: "‡∏Ñ‡∏∏‡∏ì‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
                icon: "warning",
                confirmButtonText: "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö",
            });
            return;
        }
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‚Üí ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        window.location.href = `/election/${electionId}/vote`;
        // ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ react-router v6+
        // navigate(`/election/${electionId}/vote`);
    };

    const visibleElections = elections.filter(e =>
        e.status !== "draft" // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞ .computed_status !== "draft" ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ
    );


    if (loading) return <p className="p-8">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
    return (
        <>
            <Header studentName={studentName} />

            <div className="min-h-screen bg-purple-100 p-8">
                <h1 className="text-2xl font-bold mb-6">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πâ‡∏á</h1>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {elections.map((election) => (
                        <div
                            key={election.election_id}
                            className="bg-white p-4 rounded shadow"
                        >
                            <img
                                src={`http://localhost:5000${election.image_path}`}
                                alt="election"
                                className="w-full h-48 object-cover rounded mb-4"
                            />
                            <p className="font-semibold mb-2">{election.election_name}</p>
                            <div className="h-[4.5rem] overflow-hidden">
                                <p className="text-sm text-gray-700 line-clamp-2 break-all">
                                    {election.description}
                                </p>
                            </div>


                            {/* <p className="text-sm mt-2">
                                <span className="font-semibold">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</span>{" "}
                                {formatDateTime(election.registration_start)}
                            </p>
                            <p className="text-sm">
                                <span className="font-semibold">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</span>{" "}
                                {formatDateTime(election.registration_end)}
                            </p>
                            <p className="text-sm mt-2">
                                <span className="font-semibold">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:</span>{" "}
                                {formatDateTime(election.start_date)}
                            </p>
                            <p className="text-sm">
                                <span className="font-semibold">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:</span>{" "}
                                {formatDateTime(election.end_date)}
                            </p> */}

                            <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-y-3 gap-x-6 text-sm border-t pt-4">
                                <div>
                                    <span className="font-semibold text-gray-700">üì• ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</span><br />
                                    <span className="text-gray-800">{formatDateTime(election.registration_start)}</span>
                                </div>
                                <div>
                                    <span className="font-semibold text-gray-700">üì§ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</span><br />
                                    <span className="text-gray-800">{formatDateTime(election.registration_end)}</span>
                                </div>
                                <div>
                                    <span className="font-semibold text-gray-700">üó≥Ô∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:</span><br />
                                    <span className="text-gray-800">{formatDateTime(election.start_date)}</span>
                                </div>
                                <div>
                                    <span className="font-semibold text-gray-700">üõë ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:</span><br />
                                    <span className="text-gray-800">{formatDateTime(election.end_date)}</span>
                                </div>
                            </div>


                            <p className="text-sm mt-2">
                                <span className="font-semibold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>{" "}
                                <span className={`px-2 py-1 rounded text-white text-xs ${election.computed_status === "registration" ? "bg-violet-500" :
                                    election.computed_status === "active" ? "bg-green-500" :
                                        election.computed_status === "closed" ? "bg-gray-500" :
                                            election.computed_status === "completed" ? "bg-slate-500" : "bg-purple-500"
                                    }`}>
                                    {translateStatus(election.computed_status)}
                                </span>
                            </p>

                            <div className="mt-4 flex flex-col space-y-2">
                                {/* ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏´‡πá‡∏ô */}
                                <Link
                                    to={`/election/${election.election_id}`}
                                    className="block text-center bg-blue-600 text-white py-1 rounded hover:bg-blue-700"
                                >
                                    ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                                </Link>

                                {/* ‡∏ñ‡πâ‡∏≤ Login ‡πÅ‡∏•‡πâ‡∏ß */}
                                {isLoggedIn && (
                                    <>
                                        {/* ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ */}
                                        {roles.includes("‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤") && election.computed_status === "registration" && (
                                            <button
                                                className="w-full bg-yellow-500 text-white py-1 rounded hover:bg-yellow-600"
                                                onClick={() => checkEligibility(election.election_id)}
                                            >
                                                ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
                                            </button>
                                        )}

                                        {/* ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏ß‡∏ï */}
                                        {/* {roles.includes("‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤") && election.computed_status === "active" && (
                                            // <button className="w-full bg-green-500 text-white py-1 rounded hover:bg-green-600">
                                            //     ‡πÇ‡∏´‡∏ß‡∏ï
                                            // </button>
                                            // <Link
                                            //     to={`/election/${election.election_id}/vote`}
                                            //     className="w-full bg-green-500 text-white py-1 rounded hover:bg-green-600 text-center"
                                            // >
                                            //     ‡πÇ‡∏´‡∏ß‡∏ï
                                            // </Link>
                                            

                                        )} */}

                                        {roles.includes("‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤") && election.computed_status === "active" && (
                                            votedElections.includes(election.election_id) ? (
                                                <button
                                                    disabled
                                                    className="w-full bg-gray-400 text-white py-1 rounded cursor-not-allowed"
                                                >
                                                    ‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                                                </button>
                                            ) : (
                                                <button
                                                    className="w-full bg-green-500 text-white py-1 rounded hover:bg-green-600 text-center"
                                                    onClick={() => handleVoteClick(election.election_id)}
                                                >
                                                    ‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                                                </button>
                                            )
                                        )}


                                        {/* ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏ß‡∏ï */}
                                        {roles.includes("‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤") && election.computed_status === "closed" && (
                                            <button className="w-full bg-gray-400 text-white py-1 rounded cursor-not-allowed">
                                                ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏ß‡∏ï‡πÅ‡∏•‡πâ‡∏ß
                                            </button>
                                        )}

                                        {/* ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô */}
                                        {roles.includes("‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤") && election.computed_status === "completed" && (
                                            <button className="w-full bg-blue-500 text-white py-1 rounded hover:bg-blue-600">
                                                ‡∏î‡∏π‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                                            </button>
                                        )}

                                        {/* ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•: ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ */}
                                        {roles.includes("‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•") && (
                                            <button className="w-full bg-purple-500 text-white py-1 rounded hover:bg-purple-600">
                                                ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πâ‡∏á
                                            </button>
                                        )}
                                    </>
                                )}
                            </div>

                        </div>
                    ))}
                </div>
            </div>

            {showForm && student && (
                <CandidateApplicationForm
                    student={student}
                    electionId={applyingElectionId}
                    onClose={() => setShowForm(false)}
                />
            )}

        </>
    );
}
